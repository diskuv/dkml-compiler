opam-version: "2.0"
# Composite version format is M.N.O~vA.B.C[~prelP]
# where:
# - M.N.O is OCaml compiler version
# - A.B.C is the DkML version of the dkml-runtime-common
# - P is optional DkML prerelease version
# Examples:
# - 4.14.0~prerel69 (legacy format) < 4.14.0~v0.4.0 < 4.14.0~v0.4.1~prerel69 < 4.14.0~v0.4.1
# Confer: Version Ordering in https://opam.ocaml.org/doc/Manual.html#Package-Formulas
version: "4.14.2~v2.1.6"
synopsis: "OCaml cross-compiler and libraries from the DkML distribution"
description:
  """The DkML distribution of the OCaml bytecode and native compiler, Stdlib and the other OCaml libraries (str, unix, bigarray, etc.).

The following cross-compilers have been included:
- from macOS x86_64 and macOS arm64, and vice versa
- from Linux x86 to the android armeabi-v7a ABI
- from Linux x86_64 to either the android arm64-v8a or x86_64 ABI

To support cross-compilation, environment variables for compilers like CC and LDFLAGS have no effect on the 'host' ABI.
The compiler for the 'host' ABI will be detected from conventional locations on the system and (for Visual Studio)
from configuration stored in the DkML home directory.

If you use cross-compilation, you should also install the conf-dkml-cross-toolchain package
so that your findlib installation recognizes the cross-compilers.

For Android compilation, the following opam global or switch variables are needed:
- (required) ANDROID_NDK. This is the directory containing the Android NDK installation.
  Examples: /opt/downloaded/ndk-23.1.7779620
- (optional) ANDROID_PLATFORM. The minimum API level for the Android app or library. The default varies based on the version
  of dkml-base-compiler, so it is best to set this. This version the default is 23.
  Confer: https://developer.android.com/ndk/guides/cmake#android_platform.
  Examples: android-23, 23, android-N, android-O_MR1

Advanced: Set environment variables like DKML_TARGET_ABI and DKML_COMPILE_* to do cross-compilation from the 'host' ABI
to a 'target' ABI. Those variables are documented in dkml-runtime-common's crossplatform-functions.sh script.
Search for: autodetect_compiler()

You can install dkml-base-compiler with something like:
  opam switch create dkml-4.14.2 '--formula="dkml-base-compiler" {>= "4.14.2~" & < "4.15.0~"}'"""
maintainer: ["opensource+dkml@support.diskuv.com"]
authors: ["Diskuv, Inc. <opensource+dkml@support.diskuv.com>"]
license: "Apache-2.0"
homepage: "https://github.com/diskuv/dkml-compiler"
bug-reports: "https://github.com/diskuv/dkml-compiler/issues"
depends: [
  "ocaml" {= "4.14.2" & post}

  "base-unix" {post}
  "base-bigarray" {post}
  "base-threads" {post}

  "dkml-runtime-common" {= "2.1.6"}

  "dkml-host-abi"
  ("dkml-host-abi-darwin_arm64" |
   "dkml-host-abi-darwin_x86_64" |
   "dkml-host-abi-linux_x86_64" |
   "dkml-host-abi-linux_x86" |
   "dkml-host-abi-windows_x86_64" |
   "dkml-host-abi-windows_arm64" |
   "dkml-host-abi-windows_x86")  
]
depopts: [
  "ocaml-option-32bit"
  "ocaml-option-bytecode-only"
  "ocaml-option-address-sanitizer"
  "ocaml-option-leak-sanitizer"
  "dkml-option-debuginfo"
  "dkml-option-minsize"
  "dkml-option-bx32"
  "dkml-target-abi-android_arm64v8a"
  "dkml-target-abi-android_arm32v7a"
  "dkml-target-abi-android_x86_64"
  "dkml-target-abi-android_x86"
  "dkml-target-abi-darwin_arm64"
  "dkml-target-abi-darwin_x86_64"
  "dkml-target-abi-linux_x86_64"
  "dkml-target-abi-linux_x86"
  "dkml-target-abi-windows_x86_64"
  "dkml-target-abi-windows_arm64"
  "dkml-target-abi-windows_x86"
]
conflict-class: "ocaml-core-compiler"
flags: [ compiler avoid-version ]
available: [
  opam-version >= "2.1.0"
]
build-env: [
  # Used by android-ndk-env-to-ocaml-configure-env.sh
  [ANDROID_PLATFORM = "%{ANDROID_PLATFORM}%"]
  [ANDROID_NDK = "%{ANDROID_NDK}%"]
  # When building the OCaml compiler, which has known memory leaks, don't fail.
  # And any sanitizer error ... just ignore it by using exit code 0.
  [LSAN_OPTIONS = "detect_leaks=0,exitcode=0"]
  [ASAN_OPTIONS = "detect_leaks=0,exitcode=0"]
]
build: [
  # Fail-fast if ANDROID_NDK is not present but needs to be.
  # It will also get checked much later in r-c-ocaml-3-build_cross.sh
  # when android-ndk-env-to-ocaml-configure-env.sh is evaluated.
  ["sh" "-c" """
    echo 'FATAL: Installing an Android cross-compiler requires the ANDROID_NDK opam global or switch variable.';
    echo 'It is recommended that you set ANDROID_PLATFORM (the minimum API level) as well.';
    echo 'Try something like:';
    echo '  OPAMCLI=2.0 opam config set-global ANDROID_NDK "/usr/local/lib/android/sdk/ndk/27.1.12297006"';
    echo '  OPAMCLI=2.0 opam config set-global ANDROID_PLATFORM android-23';
    exit 108"""]
  { 
    (!?ANDROID_NDK | ANDROID_NDK = "") &
    (dkml-target-abi-android_arm32v7a:installed |
     dkml-target-abi-android_arm64v8a:installed |
     dkml-target-abi-android_x86_64:installed) }

  # Dump Homebrew, which is needed for reproducible build auditing in drc's crossplatform-functions.sh.
  # TODO: Move the brewbundle.sh to drc, or in drc skip reproducible build auditing if bundle tap is not installable
  # WAS: ["sh" "scripts/macos-bundle-dump.sh"] {os = "macos"}
  ["touch" "Brewfile"] {os = "macos"}

  # OCaml source code
  ["sh" "scripts/mk-ocamldir.sh"]

  # Debugging for 4.14.2 `Env.Error(_)` and `Persistent_env.Error(_)`
  # Example:
  #   Fatal error: exception Persistent_env.Error(_)
  #   Raised at Persistent_env.error in file "typing/persistent_env.ml", line 33, characters 16-33
  #   Called from Persistent_env.acknowledge_pers_struct in file "typing/persistent_env.ml", line 196, characters 2-109
  #   Called from Persistent_env.find_pers_struct in file "typing/persistent_env.ml", line 227, characters 17-64
  #   Called from Persistent_env.find in file "typing/persistent_env.ml", line 266, characters 6-41
  #   Called from Env.lookup_ident_module in file "typing/env.ml", line 2764, characters 16-31
  #   Called from Env.lookup_module_path in file "typing/env.ml", line 3045, characters 12-62
  #   Called from Typemod.type_open_ in file "typing/typemod.ml", line 108, characters 13-71
  #   Called from Typemod.initial_env.open_module in file "typing/typemod.ml", line 130, characters 12-51
  #   Called from Typemod.initial_env in file "typing/typemod.ml", line 165, characters 9-26
  #   Called from Topcommon.initialize_toplevel_env in file "toplevel/topcommon.ml", line 281, characters 18-40
  #   Called from UTop_main.common_init in file "src/lib/uTop_main.ml", line 1384, characters 2-1921
  #   Called from UTop_main.main_aux in file "src/lib/uTop_main.ml", line 1476, characters 6-30
  #   Called from UTop_main.main_internal in file "src/lib/uTop_main.ml", line 1497, characters 4-25  
  ["install" "debug/env.ml" "debug/persistent_env.ml" "dl/ocaml/typing/"] {dkml-debug-env-failures & version > "4.14.2~v1.2.1~" & version <= "4.14.2"}

  # Create a DKMLDIR. Its structure mimics a git submodule setup.
  ["sh" "scripts/mk-dkmldir.sh" "%{version}%" "%{dkml-runtime-common:lib}%"]

  #     -------------- BEGIN compile flags: mutually exclusive set 1 --------------------
  ["sh" "-eufc"
    # https://learn.microsoft.com/en-us/cpp/build/reference/z7-zi-zi-debug-information-format?view=msvc-170
    # https://learn.microsoft.com/en-us/cpp/assembler/masm/ml-and-ml64-command-line-reference?view=msvc-170
    """
    sed 's/^INJECT_CFLAGS=$/INJECT_CFLAGS=-Z7/; s/^DEFAULT_AS=$/DEFAULT_AS=ml/; s/^INJECT_ASFLAGS=$/INJECT_ASFLAGS="-Zd -Zi"/' \
      env/standard-compiler-env-to-ocaml-configure-env.sh > \
      dkmldir/vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh
    """
  ] {dkml-option-debuginfo:installed & dkml-host-abi-windows_x86:installed}
  ["sh" "-eufc"
    """
    sed 's/^INJECT_CFLAGS=$/INJECT_CFLAGS=-Z7/; s/^DEFAULT_AS=$/DEFAULT_AS=ml64/; s/^INJECT_ASFLAGS=$/INJECT_ASFLAGS="-Zd -Zi"/' \
      env/standard-compiler-env-to-ocaml-configure-env.sh > \
      dkmldir/vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh
    """
  ] {dkml-option-debuginfo:installed & dkml-host-abi-windows_x86_64:installed}
  ["sh" "-eufc"
    """
    sed 's/^INJECT_CFLAGS=$/INJECT_CFLAGS=-Z7/; s/^DEFAULT_AS=$/DEFAULT_AS=armasm64/; s/^INJECT_ASFLAGS=$/INJECT_ASFLAGS="-Zd -Zi"/' \
      env/standard-compiler-env-to-ocaml-configure-env.sh > \
      dkmldir/vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh
    """
  ] {dkml-option-debuginfo:installed & dkml-host-abi-windows_arm64:installed}
  ["sh" "-eufc"
    # /usr/bin/as -O0 is not supported in `GNU assembler (GNU Binutils for Ubuntu) 2.30` (ex. conanio/gcc8:*)
    """
    sed 's/^INJECT_CFLAGS=$/INJECT_CFLAGS="-g -O0"/; s/^INJECT_ASFLAGS=$/INJECT_ASFLAGS="-g"/' \
      env/standard-compiler-env-to-ocaml-configure-env.sh > \
      dkmldir/vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh
    """
  ] {dkml-option-debuginfo:installed & os = "linux"}
  ["sh" "-eufc"
    # -Os optimizes for size. Useful for CPUs with small cache sizes. Confer https://wiki.gentoo.org/wiki/GCC_optimization
    "sed 's/^INJECT_CFLAGS=$/INJECT_CFLAGS=-Os/ \
      env/standard-compiler-env-to-ocaml-configure-env.sh > \
      dkmldir/vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh"
  ] {dkml-option-minsize:installed & os = "linux"}
  #     -------------- END compile flags --------------------

  #   <dkmldir>/vendor/dkml-compiler/bin/bootstrap-ocamlc.opt.exe
  #   to speed up compile
  ["sh" "scripts/install-ocamlc-opt.sh" "windows_x86" ".exe"]     { dkml-host-abi-windows_x86:installed }
  ["sh" "scripts/install-ocamlc-opt.sh" "windows_x86_64" ".exe"]  { dkml-host-abi-windows_x86_64:installed }
  ["sh" "scripts/install-ocamlc-opt.sh" "windows_arm64" ".exe"]   { dkml-host-abi-windows_arm64:installed }
  ["sh" "scripts/install-ocamlc-opt.sh" "linux_x86" ""]           { dkml-host-abi-linux_x86:installed }
  ["sh" "scripts/install-ocamlc-opt.sh" "linux_x86_64" ""]        { dkml-host-abi-linux_x86_64:installed }
  ["sh" "scripts/install-ocamlc-opt.sh" "darwin_x86_64" ""]       { dkml-host-abi-darwin_x86_64:installed }
  ["sh" "scripts/install-ocamlc-opt.sh" "darwin_arm64" ""]        { dkml-host-abi-darwin_arm64:installed }
]
install: [
  # Run r-c-ocaml-1-setup.sh
  [
    "env"
      "DKML_REPRODUCIBLE_SYSTEM_BREWFILE=%{_:build}%/Brewfile"
      "bash"
      "dkmldir/vendor/dkml-compiler/src/r-c-ocaml-1-setup.sh"
      "-d" "dkmldir"
      "-t" "%{prefix}%"
      "-f" "src-ocaml"
      "-g" "%{_:share}%/mlcross"
      "-v" "dl/ocaml"
      #   If the ocamlc.opt is not present (perhaps not available on the platform),
      #   the option will be dropped by r-c-ocaml-1-setup.sh. Just an optimization!
      "-c" "vendor/dkml-compiler/bin/bootstrap-ocamlc.opt.exe"
      "-z"
      #   32-bit bytecode only compiler? It works even on 64-bit machines that
      #   don't have 32-bit capable CPUs like Apple Silicon. It avoids:
      #     'input_value: integer too large'
      #   when bytecode is generated on a 64-bit machine and then transferred to
      #   a 32-bit machine (ex. dk cross-compilation, js_of_ocaml
      #   and wasm_of_ocaml;
      #   https://github.com/ocsigen/js_of_ocaml/blob/e6c8a9adf7a3cb5a3bbee21b753b6dab0a7c1c36/runtime/js/marshal.js#L360-L362)
      "-B" { ocaml-option-bytecode-only:installed }
      "-X" { dkml-option-bx32:installed }
      #   Sanitizers
      "-A" {ocaml-option-address-sanitizer:installed & os != "win32"}
      "-L" {ocaml-option-leak-sanitizer:installed & os != "win32"}
      #   Windows flexlink flags that affect the built ocaml.exe, ocamlc.opt.exe, etc.
      #   It is nice with the toplevel ocaml.exe to be able to debug it when the toplevel
      #   loads in other (stublib) DLLs, for example.
      "-l"                  { os = "win32" & dkml-option-debuginfo:installed }
      " -link /DEBUG:FULL"  { os = "win32" & dkml-option-debuginfo:installed }
      #   No debug/instrumented runtime when dkml-option-debuginfo not installed
      "-m"                                                      { !dkml-option-debuginfo:installed }
      "--disable-debug-runtime --disable-instrumented-runtime"  { !dkml-option-debuginfo:installed }
      "-n"                                                      { !dkml-option-debuginfo:installed }
      "--disable-debug-runtime --disable-instrumented-runtime"  { !dkml-option-debuginfo:installed }
      #   Host architectures
      "-e%{dkml-host-abi:abi}%"
      #   Target architectures
      "-adarwin_x86_64=vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh"  { dkml-host-abi:abi != "darwin_x86_64" & dkml-target-abi-darwin_x86_64:installed }
      "-adarwin_arm64=vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh"   { dkml-host-abi:abi != "darwin_arm64" & dkml-target-abi-darwin_arm64:installed }
      "-aandroid_arm32v7a=vendor/dkml-compiler/env/android-ndk-env-to-ocaml-configure-env.sh"     { dkml-target-abi-android_arm32v7a:installed }
      "-aandroid_arm64v8a=vendor/dkml-compiler/env/android-ndk-env-to-ocaml-configure-env.sh"     { dkml-target-abi-android_arm64v8a:installed }
      "-aandroid_x86_64=vendor/dkml-compiler/env/android-ndk-env-to-ocaml-configure-env.sh"       { dkml-target-abi-android_x86_64:installed }
      "-k" "vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh"
  ]

  # Run r-c-ocaml-2-build_host-noargs.sh
  [
    "sh" "scripts/build.sh"
    "-p" "%{prefix}%"
    "-s" "r-c-ocaml-2-build_host-noargs.sh"
  ]

  # Run r-c-ocaml-3-build_cross-noargs.sh (typically a no-op unless we are cross-compiling)
  [
    "sh" "scripts/build.sh"
    "-p" "%{prefix}%"
    "-s" "r-c-ocaml-3-build_cross-noargs.sh"
  ]
]
dev-repo: "git+https://github.com/diskuv/dkml-compiler.git"
extra-source "dl/ocaml.tar.gz" {
  src: "https://github.com/ocaml/ocaml/archive/4.14.2.tar.gz"
  checksum: "sha256=c2d706432f93ba85bd3383fa451d74543c32a4e84a1afaf3e8ace18f7f097b43"
}
extra-source "dl/flexdll.tar.gz" {
  src: "https://github.com/ocaml/flexdll/archive/0.43.tar.gz"
  checksum: "sha256=10e171ab7d2f8b2f238b53bb9944d4b26686f5703fbc1c059532791bc91be949"
}
extra-source "dl/homebrew-bundle.tar.gz" {
  src: "https://github.com/Homebrew/homebrew-bundle/archive/437c67db2f160369fec3a3892e3c577b6b3a4d2c.tar.gz"
  checksum: [
    "sha256=ecb6b03b2d0210369f23e3f8f64cd939a4bba633db08db62a49894653e053df4"
  ]
}
# BEGIN: Managed by `dune build '@gen-opam' --auto-promote`
extra-source "dl/windows_x86-ocamlc.opt.exe" {
  src: "https://github.com/diskuv/dkml-compiler/releases/download/2.1.0-1/windows_x86-ocamlc.opt.exe"
  checksum: "sha256=ff7c95619120f265c9e2b0d73677fd5411b9b6c05655063caf7d65b33b23f3c7"
}
extra-source "dl/windows_x86_64-ocamlc.opt.exe" {
  src: "https://github.com/diskuv/dkml-compiler/releases/download/2.1.0-1/windows_x86_64-ocamlc.opt.exe"
  checksum: "sha256=98e1a3df7f9e59cfdbe53c259cb0284b24f393fbc89777ef029d12e33ba417e6"
}
extra-source "dl/linux_x86-ocamlc.opt" {
  src: "https://github.com/diskuv/dkml-compiler/releases/download/2.1.0-1/linux_x86-ocamlc.opt"
  checksum: "sha256=3ae5b3fcf1b6f75104adac0365b1d600113bead38ea93e1a673861d48d275dea"
}
extra-source "dl/linux_x86_64-ocamlc.opt" {
  src: "https://github.com/diskuv/dkml-compiler/releases/download/2.1.0-1/linux_x86_64-ocamlc.opt"
  checksum: "sha256=beb3a45c8bb3899c6d51195db929176481640a33c1ed3f3816fcce657d9690dd"
}
extra-source "dl/darwin_x86_64-ocamlc.opt" {
  src: "https://github.com/diskuv/dkml-compiler/releases/download/2.1.0-1/darwin_x86_64-ocamlc.opt"
  checksum: "sha256=89971a82713071d8afa3b7570ca62f98ce95ab641d0af3f891554fa4e262b737"
}
extra-source "dl/darwin_arm64-ocamlc.opt" {
  src: "https://github.com/diskuv/dkml-compiler/releases/download/2.1.0-1/darwin_arm64-ocamlc.opt"
  checksum: "sha256=8cc9568301770454e5f8f81a4279baa48e786e24867cc4aa94c88653f3f93aae"
}
# END: Managed by `dune build '@gen-opam' --auto-promote`
